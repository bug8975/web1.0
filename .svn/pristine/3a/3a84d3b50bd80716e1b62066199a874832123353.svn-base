<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 启用支持Annotation注解方式的事务管理 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
    <!-- 把标记了@Controller等注解的类转换为bean -->
    <context:component-scan base-package="com.monitor.*" />

    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" 
        /> -->
    <!--文件上传设置 -->
    <!-- 文件上传最大为10M -->
    <!-- <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> 
        <property name="maxUploadSize"> <value>10485760</value> </property> <property 
        name="maxInMemorySize" value="4096" /> </bean> -->
    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
    <bean id="velocityCongfig"
        class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <property name="resourceLoaderPath">
            <value>/</value>
        </property>
        <property name="velocityProperties">
            <props>
                <prop key="input.encoding">UTF-8</prop>
                <prop key="output.encoding ">UTF-8</prop>
            </props>
        </property>
    </bean>
    <bean id="viewResolver"
        class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
        <property name="viewClass"
            value="org.springframework.web.servlet.view.velocity.VelocityView" />
        <property name="contentType">
            <value>text/html;charset=UTF-8</value>
        </property>
    </bean>

    <bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- Example: a logical view name of 'showMessage' is mapped to '/WEB-INF/jsp/showMessage.jsp' -->
        <property name="prefix" value="/WEB-INF/html/picreport" />
        <property name="suffix" value=".jsp" />
    </bean>

    <!-- property-placeholder是一个属性遍历器，定位一个属性文件，属性文件存放的是jdbc一些连接数据 -->
    <context:property-placeholder location="classpath:jdbc.properties" />
    <!--配置velocity engine默认路径 -->
    <bean id="velocityEngine"
        class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
        <property name="resourceLoaderPath" value="/velocity/"></property>
    </bean>
    <!-- 配置数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
        <property name="driverClassName" value="${driverClassName}" />
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        <property name="initialSize" value="${initialSize}" />
        <property name="maxActive" value="${maxActive}" />
        <property name="maxIdle" value="${maxIdle}" />
        <property name="minIdle" value="${minIdle}" />
    </bean>
    <bean name="entityManagerFactory"
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceXmlLocation" value="classpath:persistence.xml" />
        <property name="dataSource" ref="dataSource" />
        <!-- <property name="packagesToScan" value="com.***.data.entity" /> -->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="database" value="MYSQL" />
                <property name="showSql" value="false" />
                <property name="generateDdl" value="false" />
            </bean>
        </property>
        <property name="jpaProperties">
            <props>
                <!-- 自定义方言 -->
                <prop key="hibernate.dialect">
                    com.monitor.core.dialect.SystemMySQL5Dialect
                </prop>
                <!-- 二级缓存配置 -->

                <prop key="hibernate.cache.provider_class">
                    net.sf.ehcache.hibernate.SingletonEhCacheProvider
                </prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">
                    true
                </prop>
                <!-- <prop key="hibernate.cache.provider_class"> org.hibernate.cache.NoCacheProvider 
                    </prop> <prop key="hibernate.cache.use_query_cache">false</prop> <prop key="hibernate.cache.use_second_level_cache"> 
                    false </prop> -->
                <prop key="hibernate.use_sql_comments">false</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.generate_statistics">true</prop>
            </props>
        </property>
    </bean>
    <!-- 定义了与实体相关的dao -->
    <bean id="genericEntityDao" class="com.monitor.core.base.GenericEntityDao"
        scope="prototype" lazy-init="true">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>
    <!--使用泛型DAO作为抽象基类 abstract="true" -->
    <bean id="genericDAO" class="com.monitor.core.base.GenericDAO"
        abstract="true" depends-on="genericEntityDao">
        <property name="geDao">
            <ref bean="genericEntityDao" />
        </property>
    </bean>

    <!-- 线程池 用来做异步调用 -->
    <bean id="asyncThreadPool" class="java.util.concurrent.Executors"
        factory-method="newFixedThreadPool">
        <constructor-arg value="10" />
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref local="dataSource" />
        </property>
    </bean>
 
</beans>